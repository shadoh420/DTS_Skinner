freq_data = [0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x014a, 0x0016, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0afa, 0x0045, 0x0001, 0x001c, 0x0001, 0x003b, 0x0004, 0x003f,
             0x0005, 0x0008, 0x0001, 0x0001, 0x0010, 0x0042, 0x022b, 0x0004,
             0x018c, 0x0196, 0x00bf, 0x0077, 0x0020, 0x0035, 0x001d, 0x0011,
             0x0024, 0x0022, 0x0051, 0x0002, 0x008f, 0x0004, 0x008f, 0x0028,
             0x0001, 0x0092, 0x007f, 0x002e, 0x007c, 0x0115, 0x0048, 0x0089,
             0x003f, 0x0081, 0x000a, 0x000e, 0x0073, 0x00f8, 0x007c, 0x0026,
             0x00bb, 0x0003, 0x0097, 0x0137, 0x0151, 0x000e, 0x000d, 0x0010,
             0x0038, 0x0099, 0x0002, 0x0001, 0x0003, 0x0001, 0x0001, 0x00d4,
             0x0001, 0x082c, 0x015a, 0x02e2, 0x03e3, 0x0b3a, 0x02bf, 0x025f,
             0x0288, 0x0612, 0x014a, 0x0133, 0x04da, 0x02e1, 0x05ff, 0x06b3,
             0x0234, 0x0005, 0x06f1, 0x047f, 0x05bf, 0x03d5, 0x0199, 0x022b,
             0x003d, 0x0119, 0x0021, 0x0001, 0x0001, 0x0001, 0x0045, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
             0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001]

freq_data_keys = [chr(i) for i in range(256)]

# I had a general issue with the way Tribes build it's huffman tree
# While it can be emulated in Python, the code looked so sloppy compared
# to what even chatgpt spat out....so instead I just exported the tree
# and the values for each.  This way we can just load the tree from it
huff_tree_array = ['1101011101101010','1101011101101011','011110001100101','011110001100111','011110001101011','011110001101111','011110001110111','011110001111111','011111111010011','1101000','11010111010','011111111010111','011111111011011','011111111011111','011111111100011','011111111100111',
'011111111101011','011111111101111','011111111110011','011111111110111','011111111111011','011111111111111','100010010000011','100010010000111','100010010001011','100010010001111','100010010010011','100010010010111','100010010011011','100010010011111','100010010100011','100010010100111',
'1110','100011011','100010010101011','0100111010','100010010101111','011110000','1000100110000','011111001','1101011101100','100010011001','100010010111011','100010010111111','10001001110','100010111','101001','1000100110111',
'010000','010001','11011111','01111001','1000101100','1101011111','0111100010','10101110010','1101011000','1010111000','110101101','10001001101101','10101111','1000100111101','10111000','1101011100',
'100010011000111','10111001','10001000','1101011110','01111101','1000111','101011101','10001100','011111110','10001010','101011100111','01001110110','01001111','0111101','01111110','1101011001',
'11011110','11010111011011','10111010','1100101','1101010','01001110111','110101110111','01111111100','010011100','10111011','10001001111101','100010011110011','0111100011000','100010011111111','100010011010011','0100110',
'100010010110011','1001','1101110','00011','10000','1111','110110','101111','110011','0011','1101001','1100100','11000','00010','0010','0101',
'101010','1010111001101','0110','10110','0000','01110','010010','101000','011111000','1010110','1000101101','100010010110111','101011100110011','011110001111011','100011010','011110001110011',
'100010011010111','100010011010101','011110001110001','011110001111001','101011100110001','100010010110101','100010010110001','100010011010001','100010011111101','100010011111001','100010011110001','100010011011001','100010011000101','100010010111101','100010010111001','100010010101101',
'100010010101001','100010010100101','100010010100001','100010010011101','100010010011001','100010010010101','100010010010001','100010010001101','100010010001001','100010010000101','100010010000001','011111111111101','011111111111001','011111111110101','011111111110001','011111111101101',
'011111111101001','011111111100101','011111111100001','011111111011101','011111111011001','011111111010101','011111111010001','011110001111101','011110001110101','011110001101101','011110001101001','110101110110100','011110001101000','011110001101100','011110001110100','011110001111100',
'011111111010000','011111111010100','011111111011000','011111111011100','011111111100000','011111111100100','011111111101000','011111111101100','011111111110000','011111111110100','011111111111000','011111111111100','100010010000000','100010010000100','100010010001000','100010010001100',
'100010010010000','100010010010100','100010010011000','100010010011100','100010010100000','100010010100100','100010010101000','100010010101100','100010010111000','100010010111100','100010011000100','100010011011000','100010011110000','100010011111000','100010011111100','100010011010000',
'100010010110000','100010010110100','101011100110000','011110001111000','011110001110000','100010011010100','100010011010110','011110001110010','011110001111010','101011100110010','100010010110110','100010010110010','100010011010010','100010011111110','100010011110010','100010011000110',
'100010010111110','100010010111010','100010010101110','100010010101010','100010010100110','100010010100010','100010010011110','100010010011010','100010010010110','100010010010010','100010010001110','100010010001010','100010010000110','100010010000010','011111111111110','011111111111010',
'011111111110110','011111111110010','011111111101110','011111111101010','011111111100110','011111111100010','011111111011110','011111111011010','011111111010110','011111111010010','011110001111110','011110001110110','011110001101110','011110001101010','011110001100110','011110001100100']

huffman_dictionary = {key: value for key, value in zip(freq_data_keys, freq_data)}


class HuffmanNode:
    def __init__(self, value, frequency):
        self.value = value
        self.frequency = frequency
        self.left = None
        self.right = None

def load_huffman_tree(tree_array):
    root = HuffmanNode(None, None)
    for character in range(256):
        current_node = root
        for bit in tree_array[character]:
            if bit == '0':
                if current_node.left is None:
                    current_node.left = HuffmanNode(None, None)
                current_node = current_node.left
            else:
                if current_node.right is None:
                    current_node.right = HuffmanNode(None, None)
                current_node = current_node.right
        current_node.value = chr(character)

    return root


def huffman_decoding(bitstream, root, length):
    decoded_text = ""
    current_node = root

    char_count = 0
    consumed_bits = 0
    while True:
        bit = bitstream.read_flag()
        consumed_bits += 1
        if bit == False:
            current_node = current_node.left
        else:
            current_node = current_node.right

        if current_node.value is not None:
            decoded_text += current_node.value
            char_count += 1
            current_node = root
            if char_count == length:
                return decoded_text

    return decoded_text


huffman_tree = load_huffman_tree(huff_tree_array)


def huffman_decode(bitstream, length):
    return huffman_decoding(bitstream, huffman_tree, length)
